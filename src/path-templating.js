// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>
//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>
//
// Generated by apg-js, Version 4.3.0 [apg-js](https://github.com/ldthomas/apg-js)
export default function grammar(){
  // ```
  // SUMMARY
  //      rules = 11
  //       udts = 0
  //    opcodes = 65
  //        ---   ABNF original opcodes
  //        ALT = 8
  //        CAT = 4
  //        REP = 4
  //        RNM = 18
  //        TLS = 28
  //        TBS = 0
  //        TRG = 3
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  // characters = [33 - 126]
  // ```

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'path-template', lower: 'path-template', index: 0, isBkr: false};
  this.rules[1] = {name: 'slash', lower: 'slash', index: 1, isBkr: false};
  this.rules[2] = {name: 'path-literal', lower: 'path-literal', index: 2, isBkr: false};
  this.rules[3] = {name: 'template-expression', lower: 'template-expression', index: 3, isBkr: false};
  this.rules[4] = {name: 'param-name', lower: 'param-name', index: 4, isBkr: false};
  this.rules[5] = {name: 'unreserved', lower: 'unreserved', index: 5, isBkr: false};
  this.rules[6] = {name: 'pct-encoded', lower: 'pct-encoded', index: 6, isBkr: false};
  this.rules[7] = {name: 'sub-delims-no-slash', lower: 'sub-delims-no-slash', index: 7, isBkr: false};
  this.rules[8] = {name: 'ALPHA', lower: 'alpha', index: 8, isBkr: false};
  this.rules[9] = {name: 'DIGIT', lower: 'digit', index: 9, isBkr: false};
  this.rules[10] = {name: 'HEXDIG', lower: 'hexdig', index: 10, isBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* path-template */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 2, children: [1,2,8]};// CAT
  this.rules[0].opcodes[1] = {type: 4, index: 1};// RNM(slash)
  this.rules[0].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[0].opcodes[3] = {type: 2, children: [4,7]};// CAT
  this.rules[0].opcodes[4] = {type: 1, children: [5,6]};// ALT
  this.rules[0].opcodes[5] = {type: 4, index: 2};// RNM(path-literal)
  this.rules[0].opcodes[6] = {type: 4, index: 3};// RNM(template-expression)
  this.rules[0].opcodes[7] = {type: 4, index: 1};// RNM(slash)
  this.rules[0].opcodes[8] = {type: 3, min: 0, max: 1};// REP
  this.rules[0].opcodes[9] = {type: 1, children: [10,11]};// ALT
  this.rules[0].opcodes[10] = {type: 4, index: 2};// RNM(path-literal)
  this.rules[0].opcodes[11] = {type: 4, index: 3};// RNM(template-expression)

  /* slash */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 7, string: [47]};// TLS

  /* path-literal */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[2].opcodes[1] = {type: 1, children: [2,3,4,5,6]};// ALT
  this.rules[2].opcodes[2] = {type: 4, index: 5};// RNM(unreserved)
  this.rules[2].opcodes[3] = {type: 4, index: 6};// RNM(pct-encoded)
  this.rules[2].opcodes[4] = {type: 4, index: 7};// RNM(sub-delims-no-slash)
  this.rules[2].opcodes[5] = {type: 7, string: [58]};// TLS
  this.rules[2].opcodes[6] = {type: 7, string: [64]};// TLS

  /* template-expression */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[3].opcodes[1] = {type: 7, string: [123]};// TLS
  this.rules[3].opcodes[2] = {type: 4, index: 4};// RNM(param-name)
  this.rules[3].opcodes[3] = {type: 7, string: [125]};// TLS

  /* param-name */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[4].opcodes[1] = {type: 1, children: [2,3,4,5,6]};// ALT
  this.rules[4].opcodes[2] = {type: 4, index: 5};// RNM(unreserved)
  this.rules[4].opcodes[3] = {type: 4, index: 6};// RNM(pct-encoded)
  this.rules[4].opcodes[4] = {type: 4, index: 7};// RNM(sub-delims-no-slash)
  this.rules[4].opcodes[5] = {type: 7, string: [58]};// TLS
  this.rules[4].opcodes[6] = {type: 7, string: [64]};// TLS

  /* unreserved */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = {type: 1, children: [1,2,3,4,5,6]};// ALT
  this.rules[5].opcodes[1] = {type: 4, index: 8};// RNM(ALPHA)
  this.rules[5].opcodes[2] = {type: 4, index: 9};// RNM(DIGIT)
  this.rules[5].opcodes[3] = {type: 7, string: [45]};// TLS
  this.rules[5].opcodes[4] = {type: 7, string: [46]};// TLS
  this.rules[5].opcodes[5] = {type: 7, string: [95]};// TLS
  this.rules[5].opcodes[6] = {type: 7, string: [126]};// TLS

  /* pct-encoded */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[6].opcodes[1] = {type: 7, string: [37]};// TLS
  this.rules[6].opcodes[2] = {type: 4, index: 10};// RNM(HEXDIG)
  this.rules[6].opcodes[3] = {type: 4, index: 10};// RNM(HEXDIG)

  /* sub-delims-no-slash */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9,10]};// ALT
  this.rules[7].opcodes[1] = {type: 7, string: [33]};// TLS
  this.rules[7].opcodes[2] = {type: 7, string: [36]};// TLS
  this.rules[7].opcodes[3] = {type: 7, string: [38]};// TLS
  this.rules[7].opcodes[4] = {type: 7, string: [39]};// TLS
  this.rules[7].opcodes[5] = {type: 7, string: [40]};// TLS
  this.rules[7].opcodes[6] = {type: 7, string: [41]};// TLS
  this.rules[7].opcodes[7] = {type: 7, string: [42]};// TLS
  this.rules[7].opcodes[8] = {type: 7, string: [43]};// TLS
  this.rules[7].opcodes[9] = {type: 7, string: [44]};// TLS
  this.rules[7].opcodes[10] = {type: 7, string: [59]};// TLS

  /* ALPHA */
  this.rules[8].opcodes = [];
  this.rules[8].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[8].opcodes[1] = {type: 5, min: 65, max: 90};// TRG
  this.rules[8].opcodes[2] = {type: 5, min: 97, max: 122};// TRG

  /* DIGIT */
  this.rules[9].opcodes = [];
  this.rules[9].opcodes[0] = {type: 5, min: 48, max: 57};// TRG

  /* HEXDIG */
  this.rules[10].opcodes = [];
  this.rules[10].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7]};// ALT
  this.rules[10].opcodes[1] = {type: 4, index: 9};// RNM(DIGIT)
  this.rules[10].opcodes[2] = {type: 7, string: [97]};// TLS
  this.rules[10].opcodes[3] = {type: 7, string: [98]};// TLS
  this.rules[10].opcodes[4] = {type: 7, string: [99]};// TLS
  this.rules[10].opcodes[5] = {type: 7, string: [100]};// TLS
  this.rules[10].opcodes[6] = {type: 7, string: [101]};// TLS
  this.rules[10].opcodes[7] = {type: 7, string: [102]};// TLS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function toString(){
    let str = "";
    str += "; OpenAPI Path Templating ABNF syntax\n";
    str += "path-template       = slash *( ( path-literal / template-expression ) slash ) [ path-literal / template-expression ]\n";
    str += "slash               = \"/\"\n";
    str += "path-literal        = 1*( unreserved / pct-encoded / sub-delims-no-slash / \":\" / \"@\" )\n";
    str += "template-expression = \"{\" param-name \"}\"\n";
    str += "param-name          = 1*( unreserved / pct-encoded / sub-delims-no-slash / \":\" / \"@\" )\n";
    str += "\n";
    str += "; Characters definitions (from RFC 3986)\n";
    str += "unreserved          = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n";
    str += "pct-encoded         = \"%\" HEXDIG HEXDIG\n";
    str += "sub-delims-no-slash = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n";
    str += "                    / \"*\" / \"+\" / \",\" / \";\"\n";
    str += "ALPHA               = %x41-5A / %x61-7A   ; A-Z / a-z\n";
    str += "DIGIT               = %x30-39            ; 0-9\n";
    str += "HEXDIG              = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n";
    return str;
  }
}
